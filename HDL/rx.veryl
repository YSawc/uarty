pub module Rx #(
    param CLOCK_FREQUENCY: logic<30> = 32'd50000000,
    param BAUD_RATE      : logic<30> = 32'd115200  ,
) (
    i_clk   : input  logic   ,
    i_rst   : input  logic   ,
    i_data  : input  logic   ,
    i_re    : input  logic   ,
    o_data  : output logic<8>,
    o_busy  : output logic   ,
    o_finish: output logic   ,
) {
    let wait_div       : logic<32> = CLOCK_FREQUENCY / BAUD_RATE;
    var wait_count     : logic<10>;
    var wait_count_next: logic<10>;
    enum Status: logic     {
        idle,
        receive,
    }
    var status        : Status   ;
    var status_next   : Status   ;
    var data_reg      : logic <9>;
    var data_reg_next : logic <9>;
    var bit_count     : logic <5>;
    var bit_count_next: logic <5>;
    var o_busy_next   : logic    ;
    var o_finish_next : logic    ;
    var o_data_next   : logic <8>;

    always_comb {
        wait_count_next = wait_count;
        bit_count_next  = bit_count;
        status_next     = status;
        data_reg_next   = data_reg;
        o_finish_next   = o_finish;
        o_busy_next     = o_busy;
        o_data_next     = o_data;
        case status {
            Status::idle: {
                if i_re && i_data == 0 {
                    o_busy_next = 1;
                    status_next = Status::receive;
                }
            }
            Status::receive: {
                if wait_count >= wait_div {
                    if bit_count >= 9 {
                        if o_finish {
                            o_busy_next     = 0;
                            o_finish_next   = 0;
                            wait_count_next = 0;
                            status_next     = Status::idle;
                            bit_count_next  = 0;
                        } else if i_data == 1 {
                            o_finish_next = 1;
                            o_data_next   = data_reg[8:1];
                        }
                    } else {
                        status_next     =  Status::receive;
                        bit_count_next  += 1;
                        wait_count_next =  0;
                        data_reg_next   =  {i_data, data_reg[8:1]};
                    }
                } else {
                    wait_count_next += 1;
                }
            }
        }
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            status     = Status::idle;
            wait_count = 0;
            data_reg   = 0;
            bit_count  = 0;
            o_finish   = 0;
            o_busy     = 0;
            o_data     = 0;
        } else {
            status     = status_next;
            wait_count = wait_count_next;
            data_reg   = data_reg_next;
            bit_count  = bit_count_next;
            o_busy     = o_busy_next;
            o_finish   = o_finish_next;
            o_data     = o_data_next;
        }
    }
}
