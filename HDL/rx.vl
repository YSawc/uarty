module Rx #(
    parameter wait_div: logic<10> = 434,
) (
    CLK     : input  logic   ,
    RST     : input  logic   ,
    DATA_IN : input  logic   ,
    RE      : output logic   ,
    data_out: output logic<8>,
    busy    : output logic   ,
) {
    var wait_count  : logic<10>;
    var n_wait_count: logic<10>;
    enum Status: logic<3>  {
        idle,
        receive,
    }
    var status     : Status   ;
    var n_status   : Status   ;
    var data_reg   : logic <9>;
    var n_data_reg : logic <9>;
    var bit_count  : logic <5>;
    var n_bit_count: logic <5>;

    always_comb {
        n_wait_count = wait_count;
        n_bit_count  = bit_count;
        n_status     = status;
        n_data_reg   = data_reg;
        data_out     = 0;
        RE           = 0;
        case status {
            Status::idle: {
                busy = 0;
                if DATA_IN == 0 {
                    n_status = Status::receive;
                }
            }
            Status::receive: {
                busy = 1;
                if wait_count == wait_div {
                    n_wait_count = 0;
                    if bit_count == 9 {
                        n_status    = Status::idle;
                        n_bit_count = 0;
                        RE          = 1;
                        data_out    = data_reg[7:0];
                    } else {
                        n_status    =  Status::receive;
                        n_data_reg  =  {DATA_IN, data_reg[8:1]};
                        n_bit_count += 1;
                    }
                } else {
                    n_wait_count += 1;
                }
            }
        }
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            status     = Status::idle;
            wait_count = 0;
            data_reg   = 0;
            bit_count  = 0;
        } else {
            status     = n_status;
            wait_count = n_wait_count;
            data_reg   = n_data_reg;
            bit_count  = n_bit_count;
        }
    }
}
