pub module Tx #(
    param CLOCK_FREQUENCY: logic<30> = 32'd50000000,
    param BAUD_RATE      : logic<30> = 32'd115200  ,

) (
    i_clk   : input  logic   ,
    i_rst   : input  logic   ,
    i_en    : input  logic   ,
    i_data  : input  logic<8>,
    o_tx    : output logic   ,
    o_busy  : output logic   ,
    o_finish: output logic   ,
) {
    let wait_div       : logic<32> = CLOCK_FREQUENCY / BAUD_RATE;
    var wait_count     : logic<10>;
    var wait_count_next: logic<10>;
    var o_busy_next    : logic    ;
    enum Status: logic     {
        idle,
        send,
    }
    var status        : Status    ;
    var status_next   : Status    ;
    var data_buf      : logic <10>;
    var data_buf_next : logic <10>;
    var bit_count     : logic <5> ;
    var bit_count_next: logic <5> ;
    var o_finish_next : logic     ;

    assign o_tx = data_buf[0];

    always_comb {
        wait_count_next = wait_count;
        bit_count_next  = bit_count;
        status_next     = status;
        data_buf_next   = data_buf;
        o_busy_next     = o_busy;
        o_finish_next   = o_finish;
        case status {
            Status::idle: {
                if i_en {
                    if wait_count == wait_div {
                        wait_count_next = 0;
                        if bit_count == 9 {
                            o_busy_next    = 1;
                            status_next    = Status::send;
                            data_buf_next  = {1'b1, i_data, 1'b0};
                            bit_count_next = 0;
                        } else {
                            data_buf_next  =  {10'h3ff};
                            bit_count_next += 1;
                        }
                    } else {
                        wait_count_next += 1;
                    }
                }
            }
            Status::send: {
                if wait_count == wait_div {
                    wait_count_next =  0;
                    bit_count_next  += 1;
                    if bit_count == 10 {
                        o_finish_next  = 0;
                        status_next    = Status::idle;
                        bit_count_next = 0;
                    } else if bit_count == 9 {
                        o_finish_next = 1;
                        o_busy_next   = 0;
                    } else {
                        status_next   = Status::send;
                        data_buf_next = {1'b1, data_buf[9:1]};
                    }
                } else {
                    wait_count_next += 1;
                }
            }
        }
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            status     = Status::idle;
            wait_count = 0;
            data_buf   = 10'h3ff;
            bit_count  = 0;
            o_busy     = 0;
            o_finish   = 0;
        } else {
            status     = status_next;
            wait_count = wait_count_next;
            data_buf   = data_buf_next;
            bit_count  = bit_count_next;
            o_busy     = o_busy_next;
            o_finish   = o_finish_next;
        }
    }
}
