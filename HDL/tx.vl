module Tx #(
    parameter wait_div: logic<10> = 434,
) (
    CLK     : input  logic   ,
    RST     : input  logic   ,
    WE      : input  logic   ,
    DATA_IN : input  logic<8>,
    data_out: output logic   ,
    busy    : output logic   ,
) {
    var wait_count  : logic<10>;
    var n_wait_count: logic<10>;
    enum Status: logic<3>  {
        idle,
        send,
    }
    var status     : Status    ;
    var n_status   : Status    ;
    var data_reg   : logic <10>;
    var n_data_reg : logic <10>;
    var bit_count  : logic <5> ;
    var n_bit_count: logic <5> ;

    assign data_out = data_reg[0];

    always_comb {
        n_wait_count = wait_count;
        n_bit_count  = bit_count;
        n_status     = status;
        n_data_reg   = data_reg;
        case status {
            Status::idle: {
                busy = 0;
                if WE {
                    if wait_count == wait_div {
                        n_wait_count = 0;
                        if bit_count == 9 {
                            n_status    = Status::send;
                            n_data_reg  = {1'b1, DATA_IN, 1'b0};
                            n_bit_count = 0;
                        } else {
                            n_data_reg  =  {10'h3ff};
                            n_bit_count += 1;
                        }
                    } else {
                        n_wait_count += 1;
                    }
                }
            }
            Status::send: {
                busy = 1;
                if wait_count == wait_div {
                    n_wait_count = 0;
                    if bit_count == 9 {
                        n_status    = Status::idle;
                        n_bit_count = 0;
                    } else {
                        n_status    =  Status::send;
                        n_data_reg  =  {1'b1, data_reg[9:1]};
                        n_bit_count += 1;
                    }
                } else {
                    n_wait_count += 1;
                }
            }
        }
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            status     = Status::idle;
            wait_count = 0;
            data_reg   = 10'h3ff;
            bit_count  = 0;
        } else {
            status     = n_status;
            wait_count = n_wait_count;
            data_reg   = n_data_reg;
            bit_count  = n_bit_count;
        }
    }
}
